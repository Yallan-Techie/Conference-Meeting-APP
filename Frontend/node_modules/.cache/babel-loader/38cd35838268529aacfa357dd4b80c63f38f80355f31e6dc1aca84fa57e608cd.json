{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cheta\\\\OneDrive\\\\Desktop\\\\Hackathon\\\\Frontend\\\\src\\\\component\\\\booking_rooms\\\\RoomDetailsPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport ApiService from '../../service/ApiService';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RoomDetailsPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    roomId\n  } = useParams();\n  const [roomDetails, setRoomDetails] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [checkInDate, setCheckInDate] = useState(null);\n  const [showDatePicker, setShowDatePicker] = useState(false);\n  const [userId, setUserId] = useState('');\n  const [userEmail, setUserEmail] = useState('');\n  const [showMessage, setShowMessage] = useState(false);\n  const [confirmationCode, setConfirmationCode] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [availableTimeSlots, setAvailableTimeSlots] = useState([]);\n  const [bookedSlotLabels, setBookedSlotLabels] = useState([]);\n  const [startSlotLabel, setStartSlotLabel] = useState('');\n  const [endSlotLabel, setEndSlotLabel] = useState('');\n  const [selectedSlots, setSelectedSlots] = useState([]);\n  useEffect(() => {\n    const slots = [];\n    let start = moment('08:00', 'HH:mm');\n    const end = moment('19:00', 'HH:mm');\n    let id = 1;\n    while (start < end) {\n      const next = moment(start).add(30, 'minutes');\n      slots.push({\n        id: id++,\n        label: `${start.format('hh:mm A')} - ${next.format('hh:mm A')}`,\n        startTime: start.format('HH:mm'),\n        endTime: next.format('HH:mm')\n      });\n      start = next;\n    }\n    setAvailableTimeSlots(slots);\n  }, []);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setIsLoading(true);\n        const response = await ApiService.getRoomById(roomId);\n        setRoomDetails(response.room);\n        const userProfile = await ApiService.getUserProfile();\n        setUserId(userProfile.user.id);\n        setUserEmail(userProfile.user.email);\n      } catch (error) {\n        var _error$response, _error$response$data;\n        setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [roomId]);\n  useEffect(() => {\n    var _roomDetails$bookings;\n    if (checkInDate && (roomDetails === null || roomDetails === void 0 ? void 0 : (_roomDetails$bookings = roomDetails.bookings) === null || _roomDetails$bookings === void 0 ? void 0 : _roomDetails$bookings.length) > 0) {\n      const selectedDate = moment(checkInDate).format('YYYY-MM-DD');\n      const booked = roomDetails.bookings.filter(b => b.checkInDate === selectedDate).flatMap(b => b.timeSlots || []).map(slot => slot.label);\n      setBookedSlotLabels(booked);\n    } else {\n      setBookedSlotLabels([]);\n    }\n  }, [checkInDate, roomDetails]);\n  useEffect(() => {\n    if (startSlotLabel && endSlotLabel) {\n      const startIndex = availableTimeSlots.findIndex(s => s.label === startSlotLabel);\n      const endIndex = availableTimeSlots.findIndex(s => s.label === endSlotLabel);\n      if (startIndex <= endIndex) {\n        const now = moment();\n        const selectedDateStr = moment(checkInDate).format('YYYY-MM-DD');\n        const isToday = selectedDateStr === now.format('YYYY-MM-DD');\n        const rangeSlots = availableTimeSlots.slice(startIndex, endIndex + 1).filter(slot => {\n          const [startTime] = slot.label.split(' - ');\n          const slotMoment = moment(`${selectedDateStr} ${startTime}`, 'YYYY-MM-DD hh:mm A');\n          return !bookedSlotLabels.includes(slot.label) && (!isToday || slotMoment.isSameOrAfter(now));\n        });\n        setSelectedSlots(rangeSlots);\n      } else {\n        setSelectedSlots([]);\n      }\n    } else {\n      setSelectedSlots([]);\n    }\n  }, [startSlotLabel, endSlotLabel, checkInDate, availableTimeSlots, bookedSlotLabels]);\n  const sendBookingEmail = async code => {\n    try {\n      await ApiService.sendBookingConfirmationEmail(userEmail, {\n        roomType: roomDetails.roomType,\n        checkInDate: moment(checkInDate).format('DD/MM/YYYY'),\n        timeSlots: selectedSlots.map(s => s.label),\n        confirmationCode: code\n      });\n    } catch (e) {\n      console.error('Failed to send email:', e.message);\n    }\n  };\n  const acceptBooking = async () => {\n    if (!checkInDate) {\n      setErrorMessage('Please select a check-in date.');\n      return;\n    }\n    if (selectedSlots.length === 0) {\n      setErrorMessage('Please select a valid time slot range.');\n      return;\n    }\n    try {\n      const latestRoom = await ApiService.getRoomById(roomId);\n      const selectedDate = moment(checkInDate).format('YYYY-MM-DD');\n      const latestBookings = latestRoom.room.bookings || [];\n      const alreadyBookedLabels = latestBookings.filter(b => b.checkInDate === selectedDate).flatMap(b => b.timeSlots || []).map(slot => slot.label);\n      const isConflict = selectedSlots.some(slot => alreadyBookedLabels.includes(slot.label));\n      if (isConflict) {\n        setErrorMessage('Selected time slot is already booked. Please select a different time slot.');\n        setTimeout(() => setErrorMessage(''), 1000);\n        return;\n      }\n      const booking = {\n        checkInDate: selectedDate,\n        timeSlots: selectedSlots.map(slot => ({\n          id: slot.id\n        }))\n      };\n      const response = await ApiService.bookRoom(roomId, userId, booking);\n      if (response.statusCode === 200) {\n        const code = response.bookingConfirmationCode;\n        setConfirmationCode(code);\n        setShowMessage(true);\n        setErrorMessage('');\n        setSelectedSlots([]);\n        setStartSlotLabel('');\n        setEndSlotLabel('');\n        await sendBookingEmail(code);\n        setTimeout(() => {\n          setShowMessage(false);\n          navigate('/rooms');\n        }, 1000);\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const msg = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message;\n      setErrorMessage(msg);\n      console.error('Booking failed:', error);\n    }\n  };\n\n  // ending of acceptBooking function\n\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"loading\",\n    children: \"Loading room details...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"error-message\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"room-details-booking\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"room-title\",\n      children: \"Room Booking\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"room-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: roomDetails.roomPhotoUrl,\n        alt: roomDetails.roomType,\n        className: \"room-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"room-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: roomDetails.roomType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: roomDetails.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"booking-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowDatePicker(true),\n        className: \"primary-btn\",\n        children: \"Book Now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate('/rooms'),\n        className: \"secondary-btn\",\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), showDatePicker && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"booking-form\",\n        children: [/*#__PURE__*/_jsxDEV(DatePicker, {\n          selected: checkInDate,\n          onChange: date => {\n            setCheckInDate(date);\n            setStartSlotLabel('');\n            setEndSlotLabel('');\n            setSelectedSlots([]);\n          },\n          placeholderText: \"Select Check-in Date\",\n          dateFormat: \"dd/MM/yyyy\",\n          minDate: new Date(),\n          className: \"datepicker-field\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this), checkInDate && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dropdown-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"Start Time:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: startSlotLabel,\n              onChange: e => setStartSlotLabel(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"-- Select Start Time --\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 214,\n                columnNumber: 21\n              }, this), availableTimeSlots.map((slot, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n                value: slot.label,\n                disabled: bookedSlotLabels.includes(slot.label),\n                children: [slot.label, \" \", bookedSlotLabels.includes(slot.label) ? '(Booked)' : '']\n              }, idx, true, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 23\n              }, this))]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dropdown-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: \"End Time:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n              value: endSlotLabel,\n              onChange: e => setEndSlotLabel(e.target.value),\n              children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                value: \"\",\n                children: \"-- Select End Time --\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 21\n              }, this), availableTimeSlots.map((slot, idx) => {\n                const isBooked = bookedSlotLabels.includes(slot.label);\n                const startIndex = availableTimeSlots.findIndex(s => s.label === startSlotLabel);\n                const currentIndex = idx;\n                const isInvalidRange = startSlotLabel && currentIndex < startIndex;\n                return /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: slot.label,\n                  disabled: isBooked || isInvalidRange,\n                  children: [slot.label, \" \", isBooked ? '(Booked)' : '']\n                }, idx, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 233,\n                  columnNumber: 25\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 17\n          }, this), selectedSlots.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"slot-summary\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Selected Time Slots:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 243,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: selectedSlots.map((slot, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                className: \"selected-slot\",\n                children: slot.label\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 246,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: acceptBooking,\n            className: \"confirm-booking\",\n            children: \"Confirm Booking\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 17\n          }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"error-text\",\n            children: errorMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 34\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), showMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"success-banner bottom-toast\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uD83D\\uDE03 Booking successful! Confirmation Code: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: confirmationCode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 56\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n};\n_s(RoomDetailsPage, \"m/iCs2Q08okorHD34vl7wvXfW9I=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = RoomDetailsPage;\nexport default RoomDetailsPage;\nvar _c;\n$RefreshReg$(_c, \"RoomDetailsPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","ApiService","DatePicker","moment","jsxDEV","_jsxDEV","Fragment","_Fragment","RoomDetailsPage","_s","navigate","roomId","roomDetails","setRoomDetails","isLoading","setIsLoading","error","setError","checkInDate","setCheckInDate","showDatePicker","setShowDatePicker","userId","setUserId","userEmail","setUserEmail","showMessage","setShowMessage","confirmationCode","setConfirmationCode","errorMessage","setErrorMessage","availableTimeSlots","setAvailableTimeSlots","bookedSlotLabels","setBookedSlotLabels","startSlotLabel","setStartSlotLabel","endSlotLabel","setEndSlotLabel","selectedSlots","setSelectedSlots","slots","start","end","id","next","add","push","label","format","startTime","endTime","fetchData","response","getRoomById","room","userProfile","getUserProfile","user","email","_error$response","_error$response$data","data","message","_roomDetails$bookings","bookings","length","selectedDate","booked","filter","b","flatMap","timeSlots","map","slot","startIndex","findIndex","s","endIndex","now","selectedDateStr","isToday","rangeSlots","slice","split","slotMoment","includes","isSameOrAfter","sendBookingEmail","code","sendBookingConfirmationEmail","roomType","e","console","acceptBooking","latestRoom","latestBookings","alreadyBookedLabels","isConflict","some","setTimeout","booking","bookRoom","statusCode","bookingConfirmationCode","_error$response2","_error$response2$data","msg","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","roomPhotoUrl","alt","description","onClick","selected","onChange","date","placeholderText","dateFormat","minDate","Date","value","target","idx","disabled","isBooked","currentIndex","isInvalidRange","index","_c","$RefreshReg$"],"sources":["C:/Users/cheta/OneDrive/Desktop/Hackathon/Frontend/src/component/booking_rooms/RoomDetailsPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport ApiService from '../../service/ApiService';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport moment from 'moment';\n\nconst RoomDetailsPage = () => {\n  const navigate = useNavigate();\n  const { roomId } = useParams();\n\n  const [roomDetails, setRoomDetails] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [checkInDate, setCheckInDate] = useState(null);\n  const [showDatePicker, setShowDatePicker] = useState(false);\n  const [userId, setUserId] = useState('');\n  const [userEmail, setUserEmail] = useState('');\n  const [showMessage, setShowMessage] = useState(false);\n  const [confirmationCode, setConfirmationCode] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [availableTimeSlots, setAvailableTimeSlots] = useState([]);\n  const [bookedSlotLabels, setBookedSlotLabels] = useState([]);\n  const [startSlotLabel, setStartSlotLabel] = useState('');\n  const [endSlotLabel, setEndSlotLabel] = useState('');\n  const [selectedSlots, setSelectedSlots] = useState([]);\n\n  useEffect(() => {\n    const slots = [];\n    let start = moment('08:00', 'HH:mm');\n    const end = moment('19:00', 'HH:mm');\n    let id = 1;\n    while (start < end) {\n      const next = moment(start).add(30, 'minutes');\n      slots.push({\n        id: id++,\n        label: `${start.format('hh:mm A')} - ${next.format('hh:mm A')}`,\n        startTime: start.format('HH:mm'),\n        endTime: next.format('HH:mm')\n      });\n      start = next;\n    }\n    setAvailableTimeSlots(slots);\n  }, []);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setIsLoading(true);\n        const response = await ApiService.getRoomById(roomId);\n        setRoomDetails(response.room);\n        const userProfile = await ApiService.getUserProfile();\n        setUserId(userProfile.user.id);\n        setUserEmail(userProfile.user.email);\n      } catch (error) {\n        setError(error.response?.data?.message || error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchData();\n  }, [roomId]);\n\n  useEffect(() => {\n    if (checkInDate && roomDetails?.bookings?.length > 0) {\n      const selectedDate = moment(checkInDate).format('YYYY-MM-DD');\n      const booked = roomDetails.bookings\n        .filter(b => b.checkInDate === selectedDate)\n        .flatMap(b => b.timeSlots || [])\n        .map(slot => slot.label);\n      setBookedSlotLabels(booked);\n    } else {\n      setBookedSlotLabels([]);\n    }\n  }, [checkInDate, roomDetails]);\n\n  useEffect(() => {\n    if (startSlotLabel && endSlotLabel) {\n      const startIndex = availableTimeSlots.findIndex(s => s.label === startSlotLabel);\n      const endIndex = availableTimeSlots.findIndex(s => s.label === endSlotLabel);\n\n      if (startIndex <= endIndex) {\n        const now = moment();\n        const selectedDateStr = moment(checkInDate).format('YYYY-MM-DD');\n        const isToday = selectedDateStr === now.format('YYYY-MM-DD');\n\n        const rangeSlots = availableTimeSlots.slice(startIndex, endIndex + 1).filter(slot => {\n          const [startTime] = slot.label.split(' - ');\n          const slotMoment = moment(`${selectedDateStr} ${startTime}`, 'YYYY-MM-DD hh:mm A');\n          return !bookedSlotLabels.includes(slot.label) && (!isToday || slotMoment.isSameOrAfter(now));\n        });\n\n        setSelectedSlots(rangeSlots);\n      } else {\n        setSelectedSlots([]);\n      }\n    } else {\n      setSelectedSlots([]);\n    }\n  }, [startSlotLabel, endSlotLabel, checkInDate, availableTimeSlots, bookedSlotLabels]);\n\n  const sendBookingEmail = async (code) => {\n    try {\n      await ApiService.sendBookingConfirmationEmail(userEmail, {\n        roomType: roomDetails.roomType,\n        checkInDate: moment(checkInDate).format('DD/MM/YYYY'),\n        timeSlots: selectedSlots.map(s => s.label),\n        confirmationCode: code,\n      });\n    } catch (e) {\n      console.error('Failed to send email:', e.message);\n    }\n  };\n\n  const acceptBooking = async () => {\n    if (!checkInDate) {\n      setErrorMessage('Please select a check-in date.');\n      return;\n    }\n\n    if (selectedSlots.length === 0) {\n      setErrorMessage('Please select a valid time slot range.');\n      return;\n    }\n\n    try {\n      const latestRoom = await ApiService.getRoomById(roomId);\n      const selectedDate = moment(checkInDate).format('YYYY-MM-DD');\n      const latestBookings = latestRoom.room.bookings || [];\n\n      const alreadyBookedLabels = latestBookings\n        .filter(b => b.checkInDate === selectedDate)\n        .flatMap(b => b.timeSlots || [])\n        .map(slot => slot.label);\n\n      const isConflict = selectedSlots.some(slot => alreadyBookedLabels.includes(slot.label));\n      if (isConflict) {\n        setErrorMessage('Selected time slot is already booked. Please select a different time slot.');\n        setTimeout(() => setErrorMessage(''), 1000);\n        return;\n      }\n\n      const booking = {\n        checkInDate: selectedDate,\n        timeSlots: selectedSlots.map(slot => ({ id: slot.id }))\n      };\n\n      const response = await ApiService.bookRoom(roomId, userId, booking);\n\n      if (response.statusCode === 200) {\n        const code = response.bookingConfirmationCode;\n        setConfirmationCode(code);\n        setShowMessage(true);\n        setErrorMessage('');\n        setSelectedSlots([]);\n        setStartSlotLabel('');\n        setEndSlotLabel('');\n        await sendBookingEmail(code);\n\n        setTimeout(() => {\n          setShowMessage(false);\n          navigate('/rooms');\n        }, 1000);\n      }\n    } catch (error) {\n      const msg = error.response?.data?.message || error.message;\n      setErrorMessage(msg);\n      console.error('Booking failed:', error);\n    }\n  };\n\n\n  // ending of acceptBooking function\n\n  if (isLoading) return <p className=\"loading\">Loading room details...</p>;\n  if (error) return <p className=\"error-message\">{error}</p>;\n\n  return (\n    <div className=\"room-details-booking\">\n      <h1 className=\"room-title\">Room Booking</h1>\n      <div className=\"room-card\">\n        <img src={roomDetails.roomPhotoUrl} alt={roomDetails.roomType} className=\"room-image\" />\n        <div className=\"room-info\">\n          <h2>{roomDetails.roomType}</h2>\n          <p>{roomDetails.description}</p>\n        </div>\n      </div>\n\n      <div className=\"booking-panel\">\n        <button onClick={() => setShowDatePicker(true)} className=\"primary-btn\">Book Now</button>\n        <button onClick={() => navigate('/rooms')} className=\"secondary-btn\">Go Back</button>\n\n        {showDatePicker && (\n          <div className=\"booking-form\">\n            <DatePicker\n              selected={checkInDate}\n              onChange={(date) => {\n                setCheckInDate(date);\n                setStartSlotLabel('');\n                setEndSlotLabel('');\n                setSelectedSlots([]);\n              }}\n              placeholderText=\"Select Check-in Date\"\n              dateFormat=\"dd/MM/yyyy\"\n              minDate={new Date()}\n              className=\"datepicker-field\"\n            />\n\n            {checkInDate && (\n              <>\n                <div className=\"dropdown-section\">\n                  <label>Start Time:</label>\n                  <select value={startSlotLabel} onChange={(e) => setStartSlotLabel(e.target.value)}>\n                    <option value=\"\">-- Select Start Time --</option>\n                    {availableTimeSlots.map((slot, idx) => (\n                      <option key={idx} value={slot.label} disabled={bookedSlotLabels.includes(slot.label)}>\n                        {slot.label} {bookedSlotLabels.includes(slot.label) ? '(Booked)' : ''}\n                      </option>\n                    ))}\n                  </select>\n                </div>\n\n                <div className=\"dropdown-section\">\n                  <label>End Time:</label>\n                  <select value={endSlotLabel} onChange={(e) => setEndSlotLabel(e.target.value)}>\n                    <option value=\"\">-- Select End Time --</option>\n                    {availableTimeSlots.map((slot, idx) => {\n                      const isBooked = bookedSlotLabels.includes(slot.label);\n                      const startIndex = availableTimeSlots.findIndex(s => s.label === startSlotLabel);\n                      const currentIndex = idx;\n                      const isInvalidRange = startSlotLabel && currentIndex < startIndex;\n                      return (\n                        <option key={idx} value={slot.label} disabled={isBooked || isInvalidRange}>\n                          {slot.label} {isBooked ? '(Booked)' : ''}\n                        </option>\n                      );\n                    })}\n                  </select>\n                </div>\n\n                {selectedSlots.length > 0 && (\n                  <div className=\"slot-summary\">\n                    <h4>Selected Time Slots:</h4>\n                    <ul>\n                      {selectedSlots.map((slot, index) => (\n                        <li key={index} className=\"selected-slot\">{slot.label}</li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n\n                <button onClick={acceptBooking} className=\"confirm-booking\">Confirm Booking</button>\n                {errorMessage && <p className=\"error-text\">{errorMessage}</p>}\n              </>\n            )}\n          </div>\n        )}\n      </div>\n\n      {showMessage && (\n        <div className=\"success-banner bottom-toast\">\n          <p>😃 Booking successful! Confirmation Code: <strong>{confirmationCode}</strong></p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default RoomDetailsPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
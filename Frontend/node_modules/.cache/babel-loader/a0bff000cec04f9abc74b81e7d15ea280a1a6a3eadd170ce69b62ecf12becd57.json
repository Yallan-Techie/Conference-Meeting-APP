{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cheta\\\\OneDrive\\\\Desktop\\\\Hackathon\\\\Frontend\\\\src\\\\component\\\\booking_rooms\\\\RoomDetailsPage.jsx\",\n  _s = $RefreshSig$();\n// RoomDetailsPage.jsx\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport ApiService from '../../service/ApiService';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RoomDetailsPage = () => {\n  _s();\n  const navigate = useNavigate();\n  const {\n    roomId\n  } = useParams();\n  const [roomDetails, setRoomDetails] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [checkInDate, setCheckInDate] = useState(null);\n  const [showDatePicker, setShowDatePicker] = useState(false);\n  const [userId, setUserId] = useState('');\n  const [userEmail, setUserEmail] = useState('');\n  const [showMessage, setShowMessage] = useState(false);\n  const [confirmationCode, setConfirmationCode] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [availableTimeSlots, setAvailableTimeSlots] = useState([]);\n  const [bookedSlotLabels, setBookedSlotLabels] = useState([]);\n  const [startSlotLabel, setStartSlotLabel] = useState('');\n  const [endSlotLabel, setEndSlotLabel] = useState('');\n  const [selectedSlots, setSelectedSlots] = useState([]);\n  const [alreadyBookedDetails, setAlreadyBookedDetails] = useState([]);\n  useEffect(() => {\n    const slots = [];\n    let start = moment('08:00', 'HH:mm');\n    const end = moment('19:00', 'HH:mm');\n    let id = 1;\n    while (start < end) {\n      const next = moment(start).add(30, 'minutes');\n      slots.push({\n        id: id++,\n        label: `${start.format('hh:mm A')} - ${next.format('hh:mm A')}`,\n        startTime: start.format('HH:mm'),\n        endTime: next.format('HH:mm')\n      });\n      start = next;\n    }\n    setAvailableTimeSlots(slots);\n  }, []);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setIsLoading(true);\n        const response = await ApiService.getRoomById(roomId);\n        setRoomDetails(response.room);\n        const userProfile = await ApiService.getUserProfile();\n        setUserId(userProfile.user.id);\n        setUserEmail(userProfile.user.email);\n      } catch (error) {\n        var _error$response, _error$response$data;\n        setError(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    if (roomId) {\n      fetchData();\n    }\n  }, [roomId]);\n  useEffect(() => {\n    var _roomDetails$bookings;\n    if (checkInDate && (roomDetails === null || roomDetails === void 0 ? void 0 : (_roomDetails$bookings = roomDetails.bookings) === null || _roomDetails$bookings === void 0 ? void 0 : _roomDetails$bookings.length) > 0) {\n      const selectedDate = moment(checkInDate).format('YYYY-MM-DD');\n      const bookedSlots = roomDetails.bookings.filter(b => b.checkInDate === selectedDate).flatMap(b => b.timeSlots || []);\n      const labels = bookedSlots.map(slot => slot.label);\n      setBookedSlotLabels(labels);\n      const bookedDetails = roomDetails.bookings.filter(b => b.checkInDate === selectedDate).map(b => ({\n        checkInDate: b.checkInDate,\n        timeSlots: b.timeSlots || [] // âœ… FIX: fallback to [] if timeSlots is undefined\n      }));\n      setAlreadyBookedDetails(bookedDetails);\n    } else {\n      setBookedSlotLabels([]);\n      setAlreadyBookedDetails([]);\n    }\n  }, [checkInDate, roomDetails]);\n  useEffect(() => {\n    if (startSlotLabel && endSlotLabel) {\n      const startIndex = availableTimeSlots.findIndex(s => s.label === startSlotLabel);\n      const endIndex = availableTimeSlots.findIndex(s => s.label === endSlotLabel);\n      if (startIndex <= endIndex) {\n        const selectedDateStr = moment(checkInDate).format('YYYY-MM-DD');\n        const now = moment();\n        const isToday = selectedDateStr === now.format('YYYY-MM-DD');\n        const rangeSlots = availableTimeSlots.slice(startIndex, endIndex + 1).filter(slot => {\n          const [startTime] = slot.label.split(' - ');\n          const slotMoment = moment(`${selectedDateStr} ${startTime}`, 'YYYY-MM-DD hh:mm A');\n          return !bookedSlotLabels.includes(slot.label) && (!isToday || slotMoment.isSameOrAfter(now));\n        });\n        setSelectedSlots(rangeSlots);\n      } else {\n        setSelectedSlots([]);\n      }\n    } else {\n      setSelectedSlots([]);\n    }\n  }, [startSlotLabel, endSlotLabel, checkInDate, availableTimeSlots, bookedSlotLabels]);\n  const sendBookingEmail = async code => {\n    try {\n      await ApiService.sendBookingConfirmationEmail(userEmail, {\n        roomType: roomDetails.roomType,\n        checkInDate: moment(checkInDate).format('DD/MM/YYYY'),\n        timeSlots: selectedSlots.map(s => s.label),\n        confirmationCode: code\n      });\n    } catch (e) {\n      console.error('Failed to send email:', e.message);\n    }\n  };\n  const acceptBooking = async () => {\n    if (!checkInDate) {\n      setErrorMessage('Please select a check-in date.');\n      return;\n    }\n    if (selectedSlots.length === 0) {\n      setErrorMessage('Please select a valid time slot range.');\n      return;\n    }\n    try {\n      const latestRoom = await ApiService.getRoomById(roomId);\n      const selectedDate = moment(checkInDate).format('YYYY-MM-DD');\n      const latestBookings = latestRoom.room.bookings || [];\n      const alreadyBookedLabels = latestBookings.filter(b => b.checkInDate === selectedDate).flatMap(b => b.timeSlots || []).map(slot => slot.label);\n      const isConflict = selectedSlots.some(slot => alreadyBookedLabels.includes(slot.label));\n      if (isConflict) {\n        setErrorMessage('Selected time slot is already booked. Please select a different time slot.');\n        setTimeout(() => setErrorMessage(''), 1000);\n        return;\n      }\n      const booking = {\n        checkInDate: selectedDate,\n        timeSlotIds: selectedSlots.map(slot => slot.id)\n      };\n      const response = await ApiService.bookRoom(roomId, userId, booking);\n      if (response.statusCode === 200) {\n        const code = response.bookingConfirmationCode;\n        setConfirmationCode(code);\n        setShowMessage(true);\n        setErrorMessage('');\n        setSelectedSlots([]);\n        setStartSlotLabel('');\n        setEndSlotLabel('');\n        await sendBookingEmail(code);\n        setTimeout(() => {\n          setShowMessage(false);\n          navigate('/rooms');\n        }, 1000);\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const msg = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || error.message;\n      setErrorMessage(msg);\n      console.error('Booking failed:', error);\n    }\n  };\n  if (isLoading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"loading\",\n    children: \"Loading room details...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 189,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"error-message\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 190,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"room-details-booking\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"room-title\",\n      children: \"Room Booking\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"room-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: roomDetails.roomPhotoUrl,\n        alt: roomDetails.roomType,\n        className: \"room-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"room-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: roomDetails.roomType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: roomDetails.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"booking-panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowDatePicker(true),\n        className: \"primary-btn\",\n        children: \"Book Now\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate('/rooms'),\n        className: \"secondary-btn\",\n        children: \"Go Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this), showDatePicker && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"booking-form\",\n        children: [/*#__PURE__*/_jsxDEV(DatePicker, {\n          selected: checkInDate,\n          onChange: date => {\n            setCheckInDate(date);\n            setStartSlotLabel('');\n            setEndSlotLabel('');\n            setSelectedSlots([]);\n          },\n          placeholderText: \"Select Check-in Date\",\n          dateFormat: \"dd/MM/yyyy\",\n          minDate: new Date(),\n          className: \"datepicker-field\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }, this), checkInDate && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"slot-row-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"slot-left-panel\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dropdown-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Start Time:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 228,\n                columnNumber: 27\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                value: startSlotLabel,\n                onChange: e => setStartSlotLabel(e.target.value),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"-- Select Start Time --\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 230,\n                  columnNumber: 23\n                }, this), availableTimeSlots.map((slot, idx) => /*#__PURE__*/_jsxDEV(\"option\", {\n                  value: slot.label,\n                  disabled: bookedSlotLabels.includes(slot.label),\n                  children: [slot.label, \" \", bookedSlotLabels.includes(slot.label) ? '(Booked)' : '']\n                }, idx, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 232,\n                  columnNumber: 25\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 229,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"dropdown-section\",\n              children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"End Time:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 27\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                value: endSlotLabel,\n                onChange: e => setEndSlotLabel(e.target.value),\n                children: [/*#__PURE__*/_jsxDEV(\"option\", {\n                  value: \"\",\n                  children: \"-- Select End Time --\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 242,\n                  columnNumber: 23\n                }, this), availableTimeSlots.map((slot, idx) => {\n                  const isBooked = bookedSlotLabels.includes(slot.label);\n                  const startIndex = availableTimeSlots.findIndex(s => s.label === startSlotLabel);\n                  const currentIndex = idx;\n                  const isInvalidRange = startSlotLabel && currentIndex < startIndex;\n                  return /*#__PURE__*/_jsxDEV(\"option\", {\n                    value: slot.label,\n                    disabled: isBooked || isInvalidRange,\n                    children: [slot.label, \" \", isBooked ? '(Booked)' : '']\n                  }, idx, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 249,\n                    columnNumber: 27\n                  }, this);\n                })]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 19\n            }, this), selectedSlots.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"slot-summary\",\n              children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n                children: \"Selected Time Slots:\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                children: selectedSlots.map((slot, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                  className: \"selected-slot\",\n                  children: slot.label\n                }, index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 262,\n                  columnNumber: 27\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 260,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: acceptBooking,\n              className: \"confirm-booking\",\n              children: \"Confirm Booking\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 19\n            }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"error-text\",\n              children: errorMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 36\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 226,\n            columnNumber: 17\n          }, this), alreadyBookedDetails.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"booked-slots-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: \"Already Booked:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 275,\n              columnNumber: 45\n            }, this), alreadyBookedDetails.map((booking, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Check-in Date:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 278,\n                  columnNumber: 28\n                }, this), \" \", booking.checkInDate]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: \"Time Slots:\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 279,\n                  columnNumber: 28\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 279,\n                  columnNumber: 56\n                }, this), Array.isArray(booking.timeSlots) && booking.timeSlots.map((slot, i) => /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [slot.startTime, \" - \", slot.endTime, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 283,\n                    columnNumber: 78\n                  }, this)]\n                }, i, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 283,\n                  columnNumber: 31\n                }, this))]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 285,\n                columnNumber: 29\n              }, this)]\n            }, idx, true, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 23\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), showMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"success-banner bottom-toast\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uD83D\\uDE03 Booking successful! Confirmation Code: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: confirmationCode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 56\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n};\n_s(RoomDetailsPage, \"EdmJAtQS8kgR03KbVadOUHZrKO4=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = RoomDetailsPage;\nexport default RoomDetailsPage;\nvar _c;\n$RefreshReg$(_c, \"RoomDetailsPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","ApiService","DatePicker","moment","jsxDEV","_jsxDEV","RoomDetailsPage","_s","navigate","roomId","roomDetails","setRoomDetails","isLoading","setIsLoading","error","setError","checkInDate","setCheckInDate","showDatePicker","setShowDatePicker","userId","setUserId","userEmail","setUserEmail","showMessage","setShowMessage","confirmationCode","setConfirmationCode","errorMessage","setErrorMessage","availableTimeSlots","setAvailableTimeSlots","bookedSlotLabels","setBookedSlotLabels","startSlotLabel","setStartSlotLabel","endSlotLabel","setEndSlotLabel","selectedSlots","setSelectedSlots","alreadyBookedDetails","setAlreadyBookedDetails","slots","start","end","id","next","add","push","label","format","startTime","endTime","fetchData","response","getRoomById","room","userProfile","getUserProfile","user","email","_error$response","_error$response$data","data","message","_roomDetails$bookings","bookings","length","selectedDate","bookedSlots","filter","b","flatMap","timeSlots","labels","map","slot","bookedDetails","startIndex","findIndex","s","endIndex","selectedDateStr","now","isToday","rangeSlots","slice","split","slotMoment","includes","isSameOrAfter","sendBookingEmail","code","sendBookingConfirmationEmail","roomType","e","console","acceptBooking","latestRoom","latestBookings","alreadyBookedLabels","isConflict","some","setTimeout","booking","timeSlotIds","bookRoom","statusCode","bookingConfirmationCode","_error$response2","_error$response2$data","msg","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","roomPhotoUrl","alt","description","onClick","selected","onChange","date","placeholderText","dateFormat","minDate","Date","value","target","idx","disabled","isBooked","currentIndex","isInvalidRange","index","Array","isArray","i","_c","$RefreshReg$"],"sources":["C:/Users/cheta/OneDrive/Desktop/Hackathon/Frontend/src/component/booking_rooms/RoomDetailsPage.jsx"],"sourcesContent":["// RoomDetailsPage.jsx\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport ApiService from '../../service/ApiService';\nimport DatePicker from 'react-datepicker';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport moment from 'moment';\n\nconst RoomDetailsPage = () => {\n  const navigate = useNavigate();\n  const { roomId } = useParams();\n\n  const [roomDetails, setRoomDetails] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [checkInDate, setCheckInDate] = useState(null);\n  const [showDatePicker, setShowDatePicker] = useState(false);\n  const [userId, setUserId] = useState('');\n  const [userEmail, setUserEmail] = useState('');\n  const [showMessage, setShowMessage] = useState(false);\n  const [confirmationCode, setConfirmationCode] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n  const [availableTimeSlots, setAvailableTimeSlots] = useState([]);\n  const [bookedSlotLabels, setBookedSlotLabels] = useState([]);\n  const [startSlotLabel, setStartSlotLabel] = useState('');\n  const [endSlotLabel, setEndSlotLabel] = useState('');\n  const [selectedSlots, setSelectedSlots] = useState([]);\n  const [alreadyBookedDetails, setAlreadyBookedDetails] = useState([]);\n\n  useEffect(() => {\n    const slots = [];\n    let start = moment('08:00', 'HH:mm');\n    const end = moment('19:00', 'HH:mm');\n    let id = 1;\n    while (start < end) {\n      const next = moment(start).add(30, 'minutes');\n      slots.push({\n        id: id++,\n        label: `${start.format('hh:mm A')} - ${next.format('hh:mm A')}`,\n        startTime: start.format('HH:mm'),\n        endTime: next.format('HH:mm')\n      });\n      start = next;\n    }\n    setAvailableTimeSlots(slots);\n  }, []);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setIsLoading(true);\n        const response = await ApiService.getRoomById(roomId);\n        setRoomDetails(response.room);\n\n        const userProfile = await ApiService.getUserProfile();\n        setUserId(userProfile.user.id);\n        setUserEmail(userProfile.user.email);\n      } catch (error) {\n        setError(error.response?.data?.message || error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    if (roomId) {\n      fetchData();\n    }\n  }, [roomId]);\n\n  useEffect(() => {\n    if (checkInDate && roomDetails?.bookings?.length > 0) {\n      const selectedDate = moment(checkInDate).format('YYYY-MM-DD');\n\n      const bookedSlots = roomDetails.bookings\n        .filter(b => b.checkInDate === selectedDate)\n        .flatMap(b => b.timeSlots || []);\n\n      const labels = bookedSlots.map(slot => slot.label);\n      setBookedSlotLabels(labels);\n\n      const bookedDetails = roomDetails.bookings\n        .filter(b => b.checkInDate === selectedDate)\n        .map(b => ({\n          checkInDate: b.checkInDate,\n          timeSlots: b.timeSlots || [] // âœ… FIX: fallback to [] if timeSlots is undefined\n        }));\n\n      setAlreadyBookedDetails(bookedDetails);\n    } else {\n      setBookedSlotLabels([]);\n      setAlreadyBookedDetails([]);\n    }\n  }, [checkInDate, roomDetails]);\n\n  useEffect(() => {\n    if (startSlotLabel && endSlotLabel) {\n      const startIndex = availableTimeSlots.findIndex(s => s.label === startSlotLabel);\n      const endIndex = availableTimeSlots.findIndex(s => s.label === endSlotLabel);\n\n      if (startIndex <= endIndex) {\n        const selectedDateStr = moment(checkInDate).format('YYYY-MM-DD');\n        const now = moment();\n        const isToday = selectedDateStr === now.format('YYYY-MM-DD');\n\n        const rangeSlots = availableTimeSlots.slice(startIndex, endIndex + 1).filter(slot => {\n          const [startTime] = slot.label.split(' - ');\n          const slotMoment = moment(`${selectedDateStr} ${startTime}`, 'YYYY-MM-DD hh:mm A');\n          return !bookedSlotLabels.includes(slot.label) && (!isToday || slotMoment.isSameOrAfter(now));\n        });\n\n        setSelectedSlots(rangeSlots);\n      } else {\n        setSelectedSlots([]);\n      }\n    } else {\n      setSelectedSlots([]);\n    }\n  }, [startSlotLabel, endSlotLabel, checkInDate, availableTimeSlots, bookedSlotLabels]);\n\n  const sendBookingEmail = async (code) => {\n    try {\n      await ApiService.sendBookingConfirmationEmail(userEmail, {\n        roomType: roomDetails.roomType,\n        checkInDate: moment(checkInDate).format('DD/MM/YYYY'),\n        timeSlots: selectedSlots.map(s => s.label),\n        confirmationCode: code,\n      });\n    } catch (e) {\n      console.error('Failed to send email:', e.message);\n    }\n  };\n\n  const acceptBooking = async () => {\n    if (!checkInDate) {\n      setErrorMessage('Please select a check-in date.');\n      return;\n    }\n\n    if (selectedSlots.length === 0) {\n      setErrorMessage('Please select a valid time slot range.');\n      return;\n    }\n\n    try {\n      const latestRoom = await ApiService.getRoomById(roomId);\n      const selectedDate = moment(checkInDate).format('YYYY-MM-DD');\n      const latestBookings = latestRoom.room.bookings || [];\n\n      const alreadyBookedLabels = latestBookings\n        .filter(b => b.checkInDate === selectedDate)\n        .flatMap(b => b.timeSlots || [])\n        .map(slot => slot.label);\n\n      const isConflict = selectedSlots.some(slot => alreadyBookedLabels.includes(slot.label));\n      if (isConflict) {\n        setErrorMessage('Selected time slot is already booked. Please select a different time slot.');\n        setTimeout(() => setErrorMessage(''), 1000);\n        return;\n      }\n\n      const booking = {\n        checkInDate: selectedDate,\n        timeSlotIds: selectedSlots.map(slot => slot.id)\n      };\n\n      const response = await ApiService.bookRoom(roomId, userId, booking);\n\n      if (response.statusCode === 200) {\n        const code = response.bookingConfirmationCode;\n        setConfirmationCode(code);\n        setShowMessage(true);\n        setErrorMessage('');\n        setSelectedSlots([]);\n        setStartSlotLabel('');\n        setEndSlotLabel('');\n        await sendBookingEmail(code);\n\n        setTimeout(() => {\n          setShowMessage(false);\n          navigate('/rooms');\n        }, 1000);\n      }\n    } catch (error) {\n      const msg = error.response?.data?.message || error.message;\n      setErrorMessage(msg);\n      console.error('Booking failed:', error);\n    }\n  };\n\n  if (isLoading) return <p className=\"loading\">Loading room details...</p>;\n  if (error) return <p className=\"error-message\">{error}</p>;\n\n  return (\n    <div className=\"room-details-booking\">\n      <h1 className=\"room-title\">Room Booking</h1>\n\n      <div className=\"room-card\">\n        <img src={roomDetails.roomPhotoUrl} alt={roomDetails.roomType} className=\"room-image\" />\n        <div className=\"room-info\">\n          <h2>{roomDetails.roomType}</h2>\n          <p>{roomDetails.description}</p>\n        </div>\n      </div>\n\n      <div className=\"booking-panel\">\n        <button onClick={() => setShowDatePicker(true)} className=\"primary-btn\">Book Now</button>\n        <button onClick={() => navigate('/rooms')} className=\"secondary-btn\">Go Back</button>\n\n        {showDatePicker && (\n          <div className=\"booking-form\">\n            <DatePicker\n              selected={checkInDate}\n              onChange={(date) => {\n                setCheckInDate(date);\n                setStartSlotLabel('');\n                setEndSlotLabel('');\n                setSelectedSlots([]);\n              }}\n              placeholderText=\"Select Check-in Date\"\n              dateFormat=\"dd/MM/yyyy\"\n              minDate={new Date()}\n              className=\"datepicker-field\"\n            />\n\n            {checkInDate && (\n              <div className=\"slot-row-container\">\n                <div className=\"slot-left-panel\">\n                  <div className=\"dropdown-section\">\n                    <br /><label>Start Time:</label>\n                    <select value={startSlotLabel} onChange={(e) => setStartSlotLabel(e.target.value)}>\n                      <option value=\"\">-- Select Start Time --</option>\n                      {availableTimeSlots.map((slot, idx) => (\n                        <option key={idx} value={slot.label} disabled={bookedSlotLabels.includes(slot.label)}>\n                          {slot.label} {bookedSlotLabels.includes(slot.label) ? '(Booked)' : ''}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n\n                  <div className=\"dropdown-section\">\n                    <br /><label>End Time:</label>\n                    <select value={endSlotLabel} onChange={(e) => setEndSlotLabel(e.target.value)}>\n                      <option value=\"\">-- Select End Time --</option>\n                      {availableTimeSlots.map((slot, idx) => {\n                        const isBooked = bookedSlotLabels.includes(slot.label);\n                        const startIndex = availableTimeSlots.findIndex(s => s.label === startSlotLabel);\n                        const currentIndex = idx;\n                        const isInvalidRange = startSlotLabel && currentIndex < startIndex;\n                        return (\n                          <option key={idx} value={slot.label} disabled={isBooked || isInvalidRange}>\n                            {slot.label} {isBooked ? '(Booked)' : ''}\n                          </option>\n                        );\n                      })}\n                    </select>\n                  </div>\n\n                  {selectedSlots.length > 0 && (\n                    <div className=\"slot-summary\">\n                      <h4>Selected Time Slots:</h4>\n                      <ul>\n                        {selectedSlots.map((slot, index) => (\n                          <li key={index} className=\"selected-slot\">{slot.label}</li>\n                        ))}\n                      </ul>\n                    </div>\n                  )}\n\n                  <br />\n                  <button onClick={acceptBooking} className=\"confirm-booking\">Confirm Booking</button>\n                  {errorMessage && <p className=\"error-text\">{errorMessage}</p>}\n                </div>\n\n                {alreadyBookedDetails.length > 0 && (\n                  <div className=\"booked-slots-section\">\n                    <h4>Already Booked:</h4><br />\n                    {alreadyBookedDetails.map((booking, idx) => (\n                      <div key={idx}>\n                        <p><strong>Check-in Date:</strong> {booking.checkInDate}</p>\n                        <p><strong>Time Slots:</strong><br />\n                          {/* âœ… FIX: only map if timeSlots is an array */}\n                          {Array.isArray(booking.timeSlots) &&\n                            booking.timeSlots.map((slot, i) => (\n                              <span key={i}>{slot.startTime} - {slot.endTime}<br /></span>\n                            ))}\n                        </p><br />\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n\n      {showMessage && (\n        <div className=\"success-banner bottom-toast\">\n          <p>ðŸ˜ƒ Booking successful! Confirmation Code: <strong>{confirmationCode}</strong></p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default RoomDetailsPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
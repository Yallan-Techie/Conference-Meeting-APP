{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cheta\\\\OneDrive\\\\Desktop\\\\Hackathon - Copy\\\\Frontend\\\\src\\\\component\\\\common\\\\BookingCalendar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport FullCalendar from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport '@fullcalendar/daygrid/main.css';\nimport ApiService from '../../service/ApiService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BookingCalendar = () => {\n  _s();\n  const [events, setEvents] = useState([]);\n  useEffect(() => {\n    const fetchRoomDetailsAndConvert = async () => {\n      try {\n        // Simulate what alreadyBookedDetails looks like\n        const roomId = 1; // üîÅ You may want to make this dynamic\n        const date = ''; // leave empty or pass today's date if required\n\n        const response = await ApiService.getRoomById(roomId); // ‚úÖ Use existing method\n        const bookings = response.data.bookings || [];\n        const groupedByDate = {};\n        bookings.forEach(booking => {\n          const date = booking.checkInDate;\n          const timeSlots = Array.isArray(booking.timeSlots) ? booking.timeSlots : [];\n          if (!groupedByDate[date]) groupedByDate[date] = [];\n          timeSlots.forEach(slot => {\n            groupedByDate[date].push(`${slot.startTime} - ${slot.endTime}`);\n          });\n        });\n        const eventsToDisplay = Object.entries(groupedByDate).flatMap(([date, slotTexts]) => slotTexts.map(slotText => ({\n          title: slotText,\n          date: date,\n          allDay: true\n        })));\n        setEvents(eventsToDisplay);\n      } catch (error) {\n        console.error('‚ùå Error fetching room or bookings:', error);\n      }\n    };\n    fetchRoomDetailsAndConvert();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD83D\\uDCC5 Booking Calendar (with alreadyBookedDetails Style)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FullCalendar, {\n      plugins: [dayGridPlugin],\n      initialView: \"dayGridMonth\",\n      events: events,\n      eventColor: \"#10b981\",\n      height: \"auto\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n_s(BookingCalendar, \"j18ueuia/psAZ/XawE3UyqzOWsE=\");\n_c = BookingCalendar;\nexport default BookingCalendar;\nvar _c;\n$RefreshReg$(_c, \"BookingCalendar\");","map":{"version":3,"names":["React","useEffect","useState","FullCalendar","dayGridPlugin","ApiService","jsxDEV","_jsxDEV","BookingCalendar","_s","events","setEvents","fetchRoomDetailsAndConvert","roomId","date","response","getRoomById","bookings","data","groupedByDate","forEach","booking","checkInDate","timeSlots","Array","isArray","slot","push","startTime","endTime","eventsToDisplay","Object","entries","flatMap","slotTexts","map","slotText","title","allDay","error","console","style","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","plugins","initialView","eventColor","height","_c","$RefreshReg$"],"sources":["C:/Users/cheta/OneDrive/Desktop/Hackathon - Copy/Frontend/src/component/common/BookingCalendar.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport FullCalendar from '@fullcalendar/react';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport '@fullcalendar/daygrid/main.css';\r\nimport ApiService from '../../service/ApiService';\r\n\r\nconst BookingCalendar = () => {\r\n  const [events, setEvents] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchRoomDetailsAndConvert = async () => {\r\n      try {\r\n        // Simulate what alreadyBookedDetails looks like\r\n        const roomId = 1; // üîÅ You may want to make this dynamic\r\n        const date = ''; // leave empty or pass today's date if required\r\n\r\n        const response = await ApiService.getRoomById(roomId); // ‚úÖ Use existing method\r\n        const bookings = response.data.bookings || [];\r\n\r\n        const groupedByDate = {};\r\n\r\n        bookings.forEach((booking) => {\r\n          const date = booking.checkInDate;\r\n          const timeSlots = Array.isArray(booking.timeSlots) ? booking.timeSlots : [];\r\n\r\n          if (!groupedByDate[date]) groupedByDate[date] = [];\r\n\r\n          timeSlots.forEach((slot) => {\r\n            groupedByDate[date].push(`${slot.startTime} - ${slot.endTime}`);\r\n          });\r\n        });\r\n\r\n        const eventsToDisplay = Object.entries(groupedByDate).flatMap(([date, slotTexts]) =>\r\n          slotTexts.map((slotText) => ({\r\n            title: slotText,\r\n            date: date,\r\n            allDay: true\r\n          }))\r\n        );\r\n\r\n        setEvents(eventsToDisplay);\r\n      } catch (error) {\r\n        console.error('‚ùå Error fetching room or bookings:', error);\r\n      }\r\n    };\r\n\r\n    fetchRoomDetailsAndConvert();\r\n  }, []);\r\n\r\n  return (\r\n    <div style={{ padding: '20px' }}>\r\n      <h2>üìÖ Booking Calendar (with alreadyBookedDetails Style)</h2>\r\n      <FullCalendar\r\n        plugins={[dayGridPlugin]}\r\n        initialView=\"dayGridMonth\"\r\n        events={events}\r\n        eventColor=\"#10b981\"\r\n        height=\"auto\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default BookingCalendar;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,YAAY,MAAM,qBAAqB;AAC9C,OAAOC,aAAa,MAAM,uBAAuB;AACjD,OAAO,gCAAgC;AACvC,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAExCD,SAAS,CAAC,MAAM;IACd,MAAMW,0BAA0B,GAAG,MAAAA,CAAA,KAAY;MAC7C,IAAI;QACF;QACA,MAAMC,MAAM,GAAG,CAAC,CAAC,CAAC;QAClB,MAAMC,IAAI,GAAG,EAAE,CAAC,CAAC;;QAEjB,MAAMC,QAAQ,GAAG,MAAMV,UAAU,CAACW,WAAW,CAACH,MAAM,CAAC,CAAC,CAAC;QACvD,MAAMI,QAAQ,GAAGF,QAAQ,CAACG,IAAI,CAACD,QAAQ,IAAI,EAAE;QAE7C,MAAME,aAAa,GAAG,CAAC,CAAC;QAExBF,QAAQ,CAACG,OAAO,CAAEC,OAAO,IAAK;UAC5B,MAAMP,IAAI,GAAGO,OAAO,CAACC,WAAW;UAChC,MAAMC,SAAS,GAAGC,KAAK,CAACC,OAAO,CAACJ,OAAO,CAACE,SAAS,CAAC,GAAGF,OAAO,CAACE,SAAS,GAAG,EAAE;UAE3E,IAAI,CAACJ,aAAa,CAACL,IAAI,CAAC,EAAEK,aAAa,CAACL,IAAI,CAAC,GAAG,EAAE;UAElDS,SAAS,CAACH,OAAO,CAAEM,IAAI,IAAK;YAC1BP,aAAa,CAACL,IAAI,CAAC,CAACa,IAAI,CAAE,GAAED,IAAI,CAACE,SAAU,MAAKF,IAAI,CAACG,OAAQ,EAAC,CAAC;UACjE,CAAC,CAAC;QACJ,CAAC,CAAC;QAEF,MAAMC,eAAe,GAAGC,MAAM,CAACC,OAAO,CAACb,aAAa,CAAC,CAACc,OAAO,CAAC,CAAC,CAACnB,IAAI,EAAEoB,SAAS,CAAC,KAC9EA,SAAS,CAACC,GAAG,CAAEC,QAAQ,KAAM;UAC3BC,KAAK,EAAED,QAAQ;UACftB,IAAI,EAAEA,IAAI;UACVwB,MAAM,EAAE;QACV,CAAC,CAAC,CACJ,CAAC;QAED3B,SAAS,CAACmB,eAAe,CAAC;MAC5B,CAAC,CAAC,OAAOS,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,oCAAoC,EAAEA,KAAK,CAAC;MAC5D;IACF,CAAC;IAED3B,0BAA0B,CAAC,CAAC;EAC9B,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAKkC,KAAK,EAAE;MAAEC,OAAO,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAC9BpC,OAAA;MAAAoC,QAAA,EAAI;IAAqD;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC9DxC,OAAA,CAACJ,YAAY;MACX6C,OAAO,EAAE,CAAC5C,aAAa,CAAE;MACzB6C,WAAW,EAAC,cAAc;MAC1BvC,MAAM,EAAEA,MAAO;MACfwC,UAAU,EAAC,SAAS;MACpBC,MAAM,EAAC;IAAM;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACd,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACtC,EAAA,CAvDID,eAAe;AAAA4C,EAAA,GAAf5C,eAAe;AAyDrB,eAAeA,eAAe;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}